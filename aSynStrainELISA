# Install and load packages
install.packages("drc", repos = "http://cran.us.r-project.org")
install.packages("nplr", repos = "http://cran.us.r-project.org")
install.packages("kableExtra", repos = "http://cran.us.r-project.org")
install.packages("dplyr", repos = "http://cran.us.r-project.org")
install.packages("ggplot2", repos = "http://cran.us.r-project.org")
install.packages("ggpubr", repos = "http://cran.us.r-project.org")
install.packages("bayestestR", repos = "http://cran.us.r-project.org")

library("drc")
library("nplr")
library("kableExtra")
library("dplyr")
library("ggplot2")
library("ggpubr")

# Read your standard curve file into the environment
# Data set 1 = 01_STDStrain.csv
StandardCurveValues<-read.csv("01_STDStrain.csv")
 
# Read your sample ODs into the environment
# Data set 2 = 02_Samp9027.csv
SampleReads9027<-read.csv("02_Samp9027.csv")
  
# Ensure data imported correctly by visualizing in tabular format
summary(StandardCurveValues)
summary(SampleReads9027)


# Generate 9027 monomer standard curve using the 5-parameter logistic (5-PL) regression, which has the form: y = B + (T - B)/[1 + 10^(b*(xmid - x))]^s }
np5_9027monomer <- nplr(x=StandardCurveValues$STD, 
                        y=StandardCurveValues$OD9027mono, 
                        npars = 5,
                        useLog = TRUE)

# Verify that the 5-PL model corresponds with what you would expect from the dataset
getPar(np5_9027monomer)$params$bottom
      getPar(np5_9027monomer)$params$top
      getPar(np5_9027monomer)$params$xmid
      getPar(np5_9027monomer)$params$scal
      getPar(np5_9027monomer)$params$s
      getStdErr(np5_9027monomer)
      getAUC(np5_9027monomer)

# Plot standard curve for 9027  monomer
plot(np5_9027monomer, pcol="aquamarine1", lcol="#283350", showGOF = FALSE,
     showEstim= FALSE, showInfl=TRUE, showCI = TRUE, cex.main = 1.5, 
     main="9027 Monomer Curve", cex.main = 1,
     xlab = expression(a-syn (ng)),
     ylim = c(0,3.5), 
     xaxt="none",
     ylab = "OD")+
axis(1,at=c( -2,-1.602059991,-1.301029996,-1,-0.602059991,-0.301029996,0,0.397940009,0.698970004,1),
     labels=c("0.010","0.025","0.050","0.100","0.250","0.500", "1.000","2.500","5.000","10.000"), cex = 0.8, las = 2)

# Generate 9027 PFF standard curve using the 5-PL model
np5_9027PFF <- nplr(x=StandardCurveValues$STD, 
                    y=StandardCurveValues$OD9027PFF, 
                    npars = 5,
                    useLog = TRUE)

# Plot standard curve for 9027 PFF
plot(np5_9027PFF, pcol="aquamarine1", lcol="#283350", showGOF = FALSE,
     showEstim= FALSE, showInfl=TRUE, showCI = TRUE, cex.main = 1.5, 
     main="9027 PFF Curve", cex.main = 1,
     xlab = expression(a-syn (ng)),
     ylim = c(0,3.5), 
     xaxt="none",
     ylab = "OD")+
axis(1,at=c(-3,-2,-1.602059991,-1.301029996,-1,-0.602059991,-0.301029996,0,0.397940009,0.698970004,1),
     labels=c("0.001","0.010","0.025","0.050","0.100","0.250","0.500", "1.000","2.500","5.000","10.000"), cex = 0.8, las = 2)
```

------------------------------------------------------------------------

#### 1b. Solve the 5-parameter logistic model to calculate aSyn concentrations from optical density (OD) readings across triplicates

Sample ODs were corrected by subtraction of background signal (from a blank well) and averaged across triplicates in Excel using a well loaded with buffer instead of sample.

```{r}
# Select number of samples to quantify
sample_OD9027 <- SampleReads9027 %>% slice(1:91)

# Solve the 5 parameter model for "x" (sample aSyn quantification) using the equation: log10(x) <- (Scal*Xmid +(ln(1/(((Bottom-Top)/(Bottom-y))^(1/s))-1)/ln(10)))/scal to return the log10([aSyn]) in a given biofluid sample and save it in your data set as "logprotconc5"

sample_OD9027$logprotconc5 <-  (getPar(np5_9027PFF)$params$scal*getPar(np5_9027PFF)$params$xmid + log(1/(((getPar(np5_9027PFF)$params$bottom - getPar(np5_9027PFF)$params$top)/(getPar(np5_9027PFF)$params$bottom - sample_OD9027$OD9027Samp))^(1/getPar(np5_9027PFF)$params$s)-1))/log(10))/getPar(np5_9027PFF)$params$scal
```

------------------------------------------------------------------------

#### **1c. Plot sample values onto the standard curve**

```{r, results='hide', message=FALSE, warning=FALSE}
# Plot log10([aSyn]) values onto the standard curve
plot(np5_9027PFF, pcol="aquamarine1", lcol= "blue3", showGOF = TRUE,
     showEstim= FALSE, showInfl=TRUE, showCI = TRUE, cex.main = 1.2, 
     main="9027 PFF Curve with Samples Plotted",
     xaxt="none",
     xlab = expression(" a-syn (ng)"),
     ylab = "OD", ylim = c(0, 3.5))
lines(sample_OD9027$logprotconc5,
      sample_OD9027$OD9027Samp,type="points",
      pch = 21, cex = 1, col="firebrick3", bg = "#F93800")
axis(1,at=c( -3,-2,-1.602059991,-1.301029996,-1,-0.602059991,-0.301029996,0,0.397940009,0.698970004,1),
     labels=c("0.001","0.010","0.025","0.050","0.100","0.250","0.500", "1.000","2.500","5.000","10.000"), cex = 1, las = 2)
```

------------------------------------------------------------------------

#### **1d. Export the values for downstream analyses**

Export your data as a csv file, which is optimal for downstream analyses.

```{r, results='hide', message=FALSE, warning=FALSE}
# Transform log10([a-syn]) to ng/well values by taking 10^logprotconc5 and then save these values in a new column called "Asyn_9027_ng"
sample_OD9027$Asyn_9027_ng<-10^sample_OD9027$logprotconc5

# Convert from ng to pg and save these values in a new column called "Asyn_9027_pg"
sample_OD9027$Asyn_9027_pg<-1000*sample_OD9027$Asyn_9027_ng

# Optionally, before exporting, values can be dilution corrected and saved in a new column called "Asyn_9027_pg_dilcorr" using the following line:
# Example: sample_OD9027$Asyn_9027_pg_dilcorr<-(dilution correction factor)*sample_OD9027$Asyn_9027_pg

# Export data to desired destination
# Example: write.csv(sample_OD9027,"C: Path to desired location//Title of file.csv", row.names = FALSE)
